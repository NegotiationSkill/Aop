Aop注解：
       <1>使用注解先导入context命名空间
            <?xml version="1.0" encoding="UTF-8"?>
            <beans xmlns="http://www.springframework.org/schema/beans"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xmlns:aop="http://www.springframework.org/schema/aop"
                   xmlns:context="http://www.springframework.org/schema/context"
                   xsi:schemaLocation="http://www.springframework.org/schema/beans
                   http://www.springframework.org/schema/beans/spring-beans.xsd
                   http://www.springframework.org/schema/aop
                   http://www.springframework.org/schema/aop/spring-aop.xsd
                   http://www.springframework.org/schema/context
                   http://www.springframework.org/schema/context/spring-context.xsd
                   ">
       <2>配置spring使其支持aop 注解
             在xml文件中添加  <aop:aspectj-autoproxy/>
       <3>配置切面：在通知类的前面加上注解   @Aspect
       <4>配置切点  在通知类中添加代码
            @PointCut("execution = ( * *..*.*(..))")
            private void pt1(){}
            注意这里的pt1就是切入点，就相当于xml文件中配置的pointCut 的id=pt1
       <5>使用注释注明通知类型
            a.前置通知：在通知前面加上备注 @Before("pt1")  或者 @before(value = "execution=( * *..*.*(..))")
            b.后置通知：在通知前面加上备注 @AfterReturning("pt1") 或者 同上
            c.异常通知：在通知前面加上备注 @AfterThrowing("pt1") 或者 同上
            d.环绕通知：在通知前面加上备注 @ @Around("pt1()") 或者 同上


注：使用普通注解通知时，会出现后置通知和最终通知的反序情况，建议使用@Around环绕通知这样不会出现顺序问题


不使用xml文件，完全使用annotation（注解）实现配置
<1>创建SpringConfig类
<2>让spring知道扫描那些包   @ComponentScane({"package1","package2"....."packagen"})
<3>让spring支持aop          @Enable